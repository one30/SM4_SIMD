#include "AVX_SM4.h"
#include <time.h>
#include <malloc.h>
#include <stdlib.h>
#include "AVX_SM4_BS.h"
#include "SM4_BS.h"
#ifndef  BS_64bit
#include "SM4_BS_256.h"
#endif
int main(int argc,char **argv)
{
	// hi();
	//SM4_BS_enc();
	// // hello();
	// // init_M();
	// //DataPresentation_8bit();
	
	benchmark_sm4_bs_encrypt();

	// // plain: 01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10
	// // key:   01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10
	// // cipher: 68 1e df 34 d2 06 96 5e 86 b3 e9 4f 53 6e 42 46

	// /*
	// 	to achieve avx2 best performance, encrypt 8 blocks at the same time, the data can be devided into 16 blocks each, each block contains 128bit
	// 	gmssl has not fully developed the application of the avx2-encryption process, some of the functions may not work properly.
	// */
	// u1 key[SM4_KEY_SIZE] = {0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10};
	// u1 plain[16 * SM4_BLOCK_SIZE] = {
	// 	0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
	// 	0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
	// 	0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
	// 	0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
	// 	0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
	// 	0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
	// 	0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
	// 	0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
	// 	0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
	// 	0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
	// 	0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
	// 	0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
	// 	0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
	// 	0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
	// 	0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
	// 	0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
	// };

	// u1 *c = plain;
	// u4 i;								// loop var
	// int *pp=(int*)c;
	// u4 rk[SM4_RND_KEY_SIZE/sizeof(u4)];
	// SM4_key_schedule(key, rk);		// since the key only has 128bit, there is no need of SIMD
	// sms4_avx2_encrypt_init(rk);

	// puts("Accuracy Test.");
	// outputChar(plain, sizeof(plain));
	// sms4_avx2_encrypt_blocks(plain, (int*)c, rk, 16 );
	// outputChar(plain, sizeof(plain));
	// sms4_avx2_decrypt_blocks(plain, (int*)c, rk, 16 );
	// outputChar(plain, sizeof(plain));

	// puts("Speed Test.");
	// u1 *plainn = (u1*)malloc(SM4_BLOCK_SIZE*(1<<20));
	// c = plainn;
	// benchmark_sm4_encrypt(plainn, c, rk, 1 << 4);
	// benchmark_sm4_decrypt(plainn, c, rk, 1 << 4);
	// benchmark_sm4_encrypt(plainn, c, rk, 1 << 8);
	// benchmark_sm4_decrypt(plainn, c, rk, 1 << 8);
	// benchmark_sm4_encrypt(plainn, c, rk, 1 << 10);
	// benchmark_sm4_decrypt(plainn, c, rk, 1 << 10);
	// benchmark_sm4_encrypt(plainn, c, rk, 1 << 12);
	// benchmark_sm4_decrypt(plainn, c, rk, 1 << 12);
	// benchmark_sm4_encrypt(plainn, c, rk, 1 << 16);
	// benchmark_sm4_decrypt(plainn, c, rk, 1 << 16);
	// benchmark_sm4_encrypt(plainn, c, rk, 1 << 18);
	// benchmark_sm4_decrypt(plainn, c, rk, 1 << 18);
	// benchmark_sm4_encrypt(plainn, c, rk, 1 << 20);
	// benchmark_sm4_decrypt(plainn, c, rk, 1 << 20);
	// system("pause");
}
	
